
//Sample usage in Kotlin
//Please review and modify the code where applicable
import com.permutive.choueirigroup.wrapper.*

    private fun Usage() {

        //This should be a singleton
        val permutive = createPermutive(this)

        val pageView: Pageview = createPageviewEvent()

        //To track a page view event - call permutive.trackPage with the pageview
        //This returns a PageTracker object, which is used to track the page
        val page = permutive.trackPage(pageView)

        //Set the page has half viewed:
        page.updatePercentageViewed(0.5f)

        //Track a vidoe playing on the page:
        val videoPlayEvent: VideoPlay = createVideoPlayEvent()
        page.trackVideoPlay(videoPlayEvent)

        //You can track other Video events with similar methods:
        //val videoPlayEvent: VideoProgress = createVideoProgressEvent()
        //page.trackVideoPlay(videoPlayEvent)

        //val videoPlayEvent: VideoEvent = createVideoEvent()
        //page.trackVideoPlay(VideoEvent)
        
        //val videoPlayEvent: VideoLoad = createVideoLoadEvent()
        //page.trackVideoPlay(VideoLoad)

        //val videoPlayEvent: VideoAdPlay = createVideoAdPlayEvent()
        //page.trackVideoPlay(VideoAdPlay)

        //val videoPlayEvent: VideoAdEvent = createVideoAdEvent()
        //page.trackVideoPlay(VideoAdEvent)

        //val videoPlayEvent: VideoAdClick = createVideoAdClickEvent()
        //page.trackVideoPlay(VideoAdClick)

        //val videoPlayEvent: VideoAdProgress = createVideoAdClickEvent()
        //page.trackVideoPlay(VideoAdProgress)


        //if the fragment/activity of the page is on goes to the background, you should:
        page.pause()
        //when the fragment/activity returns, you should:
        page.resume()


        //Finally - when the user has finished with the page, it's important to close it:
        page.close()
    }

    fun createPageviewEvent(): Pageview {
        val article = Article(
            authors = listOf("authors"),
            edition = "edition",
            id = "id",
            keywords = listOf("keywords"),
            language = "language",
            player = listOf("player"),
            publishedAt = Date(),
            type = "type",
            title = "title"
        )

        val car = Car(
            carbrand = "carbrand",
            carmodel = "carmodel"
        )

        val device = Device(
            brand = "brand",
            carrier = "carrier",
            connectionType = "connectionType",
            type = "type"
        )

        val music = Music(
            genre = "genre",
            streamingHabits = "streamingHabits"
        )

        val sports = Sport(
            country = listOf("country"),
            competition = "competition",
            match = "match",
            player = listOf("player"),
            team = listOf("team"),
            sport = "sport"
        )

        val broadcastMedia = BroadcastMedia(
            episode = "episode",
            keywords = listOf("keywords"),
            language = "language",
            series = "series",
            showID = "showID",
            showGenre = listOf("showGenre"),
            type = "type",
            season = "season",
            showname = "showname",
            subGenre = "subGenre",
            tvchannel = "tvchannel"
        )

        val user = User(
            age = "age",
            country = "country",
            gender = "gender",
            nationality = "nationality"
        )

        return Pageview(
            category = "category",
            dayOfWeek = "dayOfWeek",
            publisher = "publisher",
            searchTerm = "searchTerm",
            subcategories = listOf("subcategories"),
            timeOfDay = "timeOfDay",
            dmpproperty = "dmpproperty",
            dmtier = "dmtier",
            referrer = "referrer",
            type = "type",
            url = "url",
            article = article,
            cars = car,
            device = device,
            music = music,
            sports = sports,
            broadcastMedia = broadcastMedia,
            user = user
        )
    }

    private fun createVideoPlayEvent(): VideoPlay {
        val enrichedData = EnrichedData(
            tvchannel = "tvchannel",
            season = "season",
            episode = "episode",
            showGenre = listOf("showGenre"),
            subGenre = "subGenre",
            language = "language",
            keywords = listOf("keywords"),
            type = "type",
            category = listOf("category"),
            subcategories = listOf("subcategories")
        )

        val video = Video(
            duration = 1.0,
            name = "name",
            video_id = "video_id",
            description = listOf("description"),
            published_at = Date()
        )

        return VideoPlay(
            play_id = "play_id",
            enriched_data = enrichedData,
            video = video
        )
    }

    private fun createVideoProgressEvent(): VideoProgress {
        val enrichedData = EnrichedData(
            tvchannel = "tvchannel",
            season = "season",
            episode = "episode",
            showGenre = listOf("showGenre"),
            subGenre = "subGenre",
            language = "language",
            keywords = listOf("keywords"),
            type = "type",
            category = listOf("category"),
            subcategories = listOf("subcategories")
        )

        val video = Video(
            duration = 1.0,
            name = "name",
            video_id = "video_id",
            description = listOf("description"),
            published_at = Date()
        )

        return VideoProgress(
            play_id = "play_id",
            enriched_data = enrichedData,
            video = video
            progress = 0.5
        )
    }

    private fun createVideoEvent(): VideoEvent {
        val enrichedData = EnrichedData(
        tvchannel = "tvchannel",
        season = "season",
        episode = "episode",
        showGenre = listOf("showGenre"),
        subGenre = "subGenre",
        language = "language",
        keywords = listOf("keywords"),
        type = "type",
        category = listOf("category"),
        subcategories = listOf("subcategories")
     )

        val video = Video(
            duration = 1.0,
            name = "name",
            video_id = "video_id",
            description = listOf("description"),
            published_at = Date()
        )

        return VideoEvent(
            play_id = "play_id",
            enriched_data = enrichedData,
            video = video
            event = "full screen on"
        )
    }

    private fun createVideoLoadEvent(): VideoLoad {
        val enrichedData = EnrichedData(
            tvchannel = "tvchannel",
            season = "season",
            episode = "episode",
            showGenre = listOf("showGenre"),
            subGenre = "subGenre",
            language = "language",
            keywords = listOf("keywords"),
            type = "type",
            category = listOf("category"),
            subcategories = listOf("subcategories")
        )

        val video = Video(
            duration = 1.0,
            name = "name",
            video_id = "video_id",
            description = listOf("description"),
            published_at = Date()
        )

        return VideoLoad(
            play_id = "play_id",
            enriched_data = enrichedData,
            video = video
        )
    }

       private fun createVideoAdPlayEvent(): VideoAdPlay {
        val enrichedData = EnrichedData(
            tvchannel = "tvchannel",
            season = "season",
            episode = "episode",
            showGenre = listOf("showGenre"),
            subGenre = "subGenre",
            language = "language",
            keywords = listOf("keywords"),
            type = "type",
            category = listOf("category"),
            subcategories = listOf("subcategories")
        )

        val video = Video(
            duration = 1.0,
            name = "name",
            video_id = "video_id",
            description = listOf("description"),
            published_at = Date()
        )

        val ad = Ad (
            duration: 15,
            advertiser_name: "Adidas",
            advertiser_id: 12345,
            order_name: "Adidas",
            order_id: 12345,
            lineitem_name: "Adidas",
            lineitem_id: 12345,
            creative_name: "Adidas",
            creative_id: 12345,
            ad_id: "450703700",
            title: "In-Stream Video",
            video_type: "instream" 
        )

        return VideoAdPlay(
            play_id = "play_id",
            enriched_data = enrichedData,
            video = video,
            ad = ad
        )
    }

    private fun createVideoAdEvent(): VideoAdEvent {
        val enrichedData = EnrichedData(
            tvchannel = "tvchannel",
            season = "season",
            episode = "episode",
            showGenre = listOf("showGenre"),
            subGenre = "subGenre",
            language = "language",
            keywords = listOf("keywords"),
            type = "type",
            category = listOf("category"),
            subcategories = listOf("subcategories")
        )

        val video = Video(
            duration = 1.0,
            name = "name",
            video_id = "video_id",
            description = listOf("description"),
            published_at = Date()
        )

        val ad = Ad (
            duration: 15,
            advertiser_name: "Adidas",
            advertiser_id: 12345,
            order_name: "Adidas",
            order_id: 12345,
            lineitem_name: "Adidas",
            lineitem_id: 12345,
            creative_name: "Adidas",
            creative_id: 12345,
            ad_id: "450703700",
            title: "In-Stream Video",
            video_type: "instream" 
        )

        return VideoAdEvent(
            play_id = "play_id",
            enriched_data = enrichedData,
            video = video,
            ad = ad
            event = "full screen on"
        )
    }

    private fun createVideoAdClickEvent(): VideoAdClick {
        val enrichedData = EnrichedData(
            tvchannel = "tvchannel",
            season = "season",
            episode = "episode",
            showGenre = listOf("showGenre"),
            subGenre = "subGenre",
            language = "language",
            keywords = listOf("keywords"),
            type = "type",
            category = listOf("category"),
            subcategories = listOf("subcategories")
        )

        val video = Video(
            duration = 1.0,
            name = "name",
            video_id = "video_id",
            description = listOf("description"),
            published_at = Date()
        )

        val ad = Ad (
            duration: 15,
            advertiser_name: "Adidas",
            advertiser_id: 12345,
            order_name: "Adidas",
            order_id: 12345,
            lineitem_name: "Adidas",
            lineitem_id: 12345,
            creative_name: "Adidas",
            creative_id: 12345,
            ad_id: "450703700",
            title: "In-Stream Video",
            video_type: "instream" 
        )

        return VideoAdClick(
            play_id = "play_id",
            enriched_data = enrichedData,
            video = video,
            ad = ad
        )
    }

     private fun createVideoAdClickEvent(): VideoAdProgress {
        val enrichedData = EnrichedData(
            tvchannel = "tvchannel",
            season = "season",
            episode = "episode",
            showGenre = listOf("showGenre"),
            subGenre = "subGenre",
            language = "language",
            keywords = listOf("keywords"),
            type = "type",
            category = listOf("category"),
            subcategories = listOf("subcategories")
        )

        val video = Video(
            duration = 1.0,
            name = "name",
            video_id = "video_id",
            description = listOf("description"),
            published_at = Date()
        )

        val ad = Ad (
            duration: 15,
            advertiser_name: "Adidas",
            advertiser_id: 12345,
            order_name: "Adidas",
            order_id: 12345,
            lineitem_name: "Adidas",
            lineitem_id: 12345,
            creative_name: "Adidas",
            creative_id: 12345,
            ad_id: "450703700",
            title: "In-Stream Video",
            video_type: "instream" 
        )

        return VideoAdProgress(
            play_id = "play_id",
            enriched_data = enrichedData,
            video = video,
            ad = ad,
            progress = 0.5
        )
    }